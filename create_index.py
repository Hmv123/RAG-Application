#------------------IN THIS CODE-------------------
# We are defining a structure → The SearchIndex is like a blueprint/schema for how Azure AI Search should store and query our documents.
# Each document has chunks → We split big PDFs into smaller text pieces (chunks) so retrieval is more accurate.
# Each row has:

# id → a unique identifier for the chunk (so we can track/retrieve it).
# content → the actual text of the chunk.
# embedding → a vector (list of numbers) generated by the embedding model.
# It represents the semantic meaning of the entire chunk.
# Example: the sentences “car engine broke down” and “vehicle motor failure” will have embeddings that are close in vector space, even though the words are different.
# So, embeddings let us search by meaning, not exact words.
# Imagine a library:
# id = Call number of the book page (unique).
# content = The actual text on that page.
# embedding = A special numeric fingerprint that captures the meaning of that page.
# When someone asks “engine problem”, the system doesn’t just look for the word “engine”; it uses embeddings to also find pages talking about “motor” or “mechanical failure.”


# SearchIndexClient → connects Python to your AI Search service.
# fields → define what each document looks like (id, content, embedding).
# vector_search_dimensions=3072 → because text-embedding-3-large outputs 3072-length vectors.
# HnswAlgorithmConfiguration → tells AI Search to use HNSW, a fast algorithm for vector similarity.
# Script deletes any old index with the same name, then recreates a fresh one.


import os
from azure.core.credentials import AzureKeyCredential
from azure.search.documents.indexes import SearchIndexClient
from azure.search.documents.indexes.models import (
    SearchIndex, SimpleField, SearchField, SearchFieldDataType,
    VectorSearch, VectorSearchProfile, HnswAlgorithmConfiguration
)

# Load env variables
from dotenv import load_dotenv
load_dotenv()

search_endpoint = os.getenv("AZURE_SEARCH_ENDPOINT")
search_api_key = os.getenv("AZURE_SEARCH_API_KEY")
index_name = os.getenv("AZURE_SEARCH_INDEX")

# Connect to Azure AI Search
credential = AzureKeyCredential(search_api_key)
index_client = SearchIndexClient(endpoint=search_endpoint, credential=credential)

# Define index schema
fields = [
    SimpleField(name="id", type=SearchFieldDataType.String, key=True),
    SearchField(name="content", type=SearchFieldDataType.String, searchable=True),
    SearchField(
        name="embedding",
        type=SearchFieldDataType.Collection(SearchFieldDataType.Single),
        searchable=True,
        vector_search_dimensions=3072,   # size of text-embedding-3-large
        vector_search_profile_name="my-vector-config"
    ),
]

vector_search = VectorSearch(
    algorithms=[HnswAlgorithmConfiguration(name="my-hnsw")],#Hierarchical Navigable Small World
    profiles=[VectorSearchProfile(name="my-vector-config", algorithm_configuration_name="my-hnsw")]
)

index = SearchIndex(name=index_name, fields=fields, vector_search=vector_search)

# Delete if exists
if index_name in index_client.list_index_names():
    index_client.delete_index(index_name)

# Create index
index_client.create_index(index)
print(f"✅ Index '{index_name}' created successfully!")

